# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:
- name: npm_cache_directory           
  #value: $(Pipeline.Workspace)/node_modules   # (Build.SourcesDirectory)=(Pipeline.Workspace)
  value: "/home/vsts/.npm"  # $(Pipeline.Workspace) = /home/vsts/work/1/s

- name: NPM_CACHE_RESTORED           
  value: 'false'


pool:
  vmImage: ubuntu-latest

stages:
  - stage: BuildArtifact
    jobs:
      - job: BuildArtifact
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
              checkLatest: true
          
          - script: echo 'NPM_CACHE_RESTORED = false'
            displayName: 'NPM_CACHE_RESTORED value'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: ls -la
            displayName: 'Directories list' 

          - script: npm config ls -l
            displayName: 'npm config ls -l list'  
          
          - script: pwd
            displayName: 'Current working directory' 

          - script: pwd | ls -la
            displayName: 'List files in current working directory' 

          - script: cd /opt/hostedtoolcache/node/18.15.0/x64/etc && ls -la
            displayName: 'List files in /opt/hostedtoolcache/node/18.15.0/x64/etc/ directory' 

          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: '"npm" | "$(Agent.OS)" | package-lock.json'
              path: $(npm_cache_directory)
              restoreKeys: |
                "npm" | "$(Agent.OS)"
              cacheHitVar: NPM_CACHE_RESTORED

          - script: echo 'NPM_CACHE_RESTORED = true'
            displayName: 'NPM_CACHE_RESTORED value'
            condition: eq(variables.NPM_CACHE_RESTORED, 'true')      

          - script: npm install
            workingDirectory: '$(Build.SourcesDirectory)/'
            displayName: "Install npm packages"
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')
          
          - bash: npm run build
            displayName: Build optimize application

          - script: pwd
            displayName: 'Current working directory' 

          - script: pwd | ls -la
            displayName: 'List files in current working directory'

          # - script: pwd | ls -la $(Pipeline.Workspace)/.npm
          #   displayName: 'List files in Pipeline.Workspace/.npm directory'
          
          - script: pwd | ls -la /home/vsts/.npm
            displayName: 'List files in /home/vsts/.npm directory'
          
          - script: pwd | ls -la /home/vsts/.npm/_cacache
            displayName: 'List files in /home/vsts/.npm/_cacache directory'

          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: '"npm" | "$(Agent.OS)" | package-lock.json'
              path: $(npm_cache_directory)
              restoreKeys: |
                "npm" | "$(Agent.OS)"
              cacheHitVar: NPM_CACHE_RESTORED

          - script: echo 'NPM_CACHE_RESTORED = true'
            displayName: 'NPM_CACHE_RESTORED value'
            condition: eq(variables.NPM_CACHE_RESTORED, 'true')      

          - script: npm install
            workingDirectory: '$(Build.SourcesDirectory)'
            displayName: "Install npm packages"
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')  

          # - bash: git checkout $(Build.SourceBranchName)
          #   displayName: 'git checkout' 

          # - bash: git remote add heroku https://heroku:$(heroku_token)@git.heroku.com/powerful-brook-60339.git
          #   displayName: 'git remote add heroku'

          # - bash: git push -f https://heroku:$(heroku_token)@git.heroku.com/powerful-brook-60339.git HEAD
          # # git push heroku -f
          # # $(Build.SourceBranchName)
          #   displayName: 'git push heroku' 